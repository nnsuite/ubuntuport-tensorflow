#!/usr/bin/make -f

DEB_HOST_ARCH := $(shell dpkg-architecture -qDEB_HOST_ARCH)
ifeq ($(DEB_HOST_ARCH), amd64)
TENSORFLOW_BUILD := yes
else
TENSORFLOW_BUILD := no
endif
SHELL := /bin/bash

ifeq ($(DEB_HOST_ARCH), amd64)
CXXFLAGS = -O2 -Wno-sign-compare -Wno-unused-but-set-variable -Wno-format-security -Wno-format -fPIC -std=c++11 -msse4.2 -mfpmath=sse
CFLAGS = -O2 -Wno-sign-compare -Wno-unused-but-set-variable -Wno-format-security -Wno-format -fPIC -msse4.2 -mfpmath=sse
else
CXXFLAGS = -O2 -Wno-sign-compare -Wno-unused-but-set-variable -Wno-format-security -Wno-format -fPIC -std=c++11
CFLAGS = -O2 -Wno-sign-compare -Wno-unused-but-set-variable -Wno-format-security -Wno-format -fPIC
endif

export TF_VERSION=1.13.1
export BAZEL_OUTPUT=/tmp/bazel_output

topdir=$(shell pwd)
buildroot=${topdir}/debian/tmp
_libdir ?= /usr/lib
_includedir ?= /usr/include
packagingdir=${topdir}/debian/packages

SOURCE0001=bazel_0.19.1.tar.gz

%:
	dh $@  --with quilt --parallel

override_dh_auto_clean:
	rm -rf ${topdir}/temp

override_dh_auto_configure:
ifeq ($(TENSORFLOW_BUILD), yes)
	mkdir -p ${topdir}/temp
	mkdir -p ${BAZEL_OUTPUT}
	packages_path=${packagingdir} $(SHELL) ${topdir}/debian/package_preparation.sh
	tar -xf ${packagingdir}/${SOURCE0001} -C ${topdir}/temp
endif

override_dh_auto_build:
ifeq ($(TENSORFLOW_BUILD), yes)
	# If it's eoan (19.10), gcc-9 has some regressions. Use gcc-8 instead if it's eoan.
	if [ -f /usr/bin/gcc-8 ]; then export CC=gcc-8; export CXX=g++-8; fi; ${topdir}/temp/usr/bin/bazel --output_user_root=${BAZEL_OUTPUT} build --verbose_failures --repository_cache=${packagingdir} --distdir=${packagingdir} -c opt //tensorflow/tools/lib_package:libtensorflow
endif

	cd tensorflow/lite/tools/make && tar -xf ${packagingdir}/downloads.tar.gz
	cd tensorflow/lite/tools/make/downloads/eigen && patch -p1 < ../../../../../../debian/eigen.patch
	make -f tensorflow/lite/tools/make/Makefile TARGET=linux CFLAGS="${CFLAGS}" CXXFLAGS="${CXXFLAGS}" -j4 clean
	make -f tensorflow/lite/tools/make/Makefile TARGET=linux CFLAGS="${CFLAGS}" CXXFLAGS="${CXXFLAGS}" -j4

	### Gen .pc file ###
	# -p, --prefix	set installation prefix (default: /usr/local)
	# -l, --libdir	set lib directory (default: lib)
	# -v, --version	set TensorFlow version
	# -h, --help	display this message
	$(SHELL) ${topdir}/tensorflow/c/generate-pc.sh -p /usr -l /lib -v ${TF_VERSION}

override_dh_auto_install:

	install -d ${buildroot}
	install -d ${buildroot}${_libdir}
	install -d ${buildroot}${_libdir}/pkgconfig
	install -d ${buildroot}${_includedir}

ifeq ($(TENSORFLOW_BUILD), yes)
	tar -xf ${topdir}/bazel-bin/tensorflow/tools/lib_package/libtensorflow.tar.gz
	install -d ${buildroot}${_includedir}/tensorflow
	install -d ${buildroot}${_includedir}/tensorflow/c
	install -d ${buildroot}${_includedir}/tensorflow/c/eager

	install -m 0644 include/tensorflow/c/*.h ${buildroot}${_includedir}/tensorflow/c/
	install -m 0644 include/tensorflow/c/eager/*.h ${buildroot}${_includedir}/tensorflow/c/eager/
	install -m 0644 lib/*.so ${buildroot}${_libdir}/
	install -m 0644 tensorflow.pc ${buildroot}${_libdir}/pkgconfig/
endif

# TF-Lite

	install -d ${buildroot}${_includedir}/tensorflow/lite
	install -d ${buildroot}${_includedir}/tensorflow/lite/kernels
	install -d ${buildroot}${_includedir}/tensorflow/lite/c
	install -d ${buildroot}${_includedir}/tensorflow/lite/core
	install -d ${buildroot}${_includedir}/tensorflow/lite/core/api
	install -d ${buildroot}${_includedir}/tensorflow/lite/tools
	install -d ${buildroot}${_includedir}/tensorflow/lite/schema
	install -d ${buildroot}${_includedir}/tensorflow/lite/profiling
	install -d ${buildroot}${_includedir}/tensorflow/contrib
	ln -sf ${_includedir}/tensorflow/lite ${buildroot}/${_includedir}/tensorflow/contrib/lite

	find tensorflow/lite/tools/make/gen/ -name "libtensorflow-lite.a" -type f -exec cp '{}' ${buildroot}${_libdir}/ \;
	install -m 0644 tensorflow/lite/*.h ${buildroot}${_includedir}/tensorflow/lite/
	install -m 0644 tensorflow/lite/kernels/*.h ${buildroot}${_includedir}/tensorflow/lite/kernels
	install -m 0644 tensorflow/lite/c/*.h ${buildroot}${_includedir}/tensorflow/lite/c
	install -m 0644 tensorflow/lite/core/*.h ${buildroot}${_includedir}/tensorflow/lite/core
	install -m 0644 tensorflow/lite/core/api/*.h ${buildroot}${_includedir}/tensorflow/lite/core/api
	install -m 0644 tensorflow/lite/tools/*.h ${buildroot}${_includedir}/tensorflow/lite/tools
	install -m 0644 tensorflow/lite/schema/*.h ${buildroot}${_includedir}/tensorflow/lite/schema
	install -m 0644 tensorflow/lite/profiling/*.h ${buildroot}${_includedir}/tensorflow/lite/profiling

	install -m 0644 tensorflow.pc ${buildroot}${_libdir}/pkgconfig/tensorflow-lite.pc
	sed -i "s|-ltensorflow|-ltensorflow-lite|" ${buildroot}${_libdir}/pkgconfig/tensorflow-lite.pc
